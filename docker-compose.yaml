services:
  postgres:
    container_name: postgresql
    image: postgres
    build:
      context: ./postgres
      args:
        - USER_UID=${USER_UID}
        - USER_GID=${USER_GID}
    restart: always
    tty: true
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=$(POSTGRES_DB)
    volumes:
      - ${DATA_LIB}/data/postgres:/var/lib/postgresql/data
      - ./postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - docker-network

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    restart: always
    depends_on:
      - postgres
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - 8080:80
    volumes:
      - ${DATA_LIB}/pgadmin:/var/lib/pgadmin

  workspace:
    container_name: workspace
    build:
      context: ./workspace
      args:
        - USER_UID=${USER_UID}
        - USER_GID=${USER_GID}
    restart: always
    volumes:
      - ../:/var/www/
      - "/etc/timezone:/etc/timezone:ro"
      - "/etc/localtime:/etc/localtime:ro"
      - ./openssl.cnf:/etc/ssl/openssl.cnf
    networks:
      - docker-network
    tty: true

  node:
    container_name: node
    build:
      context: ./node
      args:
        - USER_UID=${USER_UID}
        - USER_GID=${USER_GID}
    restart: always
    volumes:
      - ../:/var/www/
      - "/etc/timezone:/etc/timezone:ro"
      - "/etc/localtime:/etc/localtime:ro"
      - ./openssl.cnf:/etc/ssl/openssl.cnf
      - "./node/ecosystem.config.js:/tmp/ecosystem.config.js"
    networks:
      - docker-network
    tty: true
    depends_on:
      - workspace

  php8:
    container_name: php8
    build:
      context: ./php8
      args:
        - USER_UID=${USER_UID}
        - USER_GID=${USER_GID}
    restart: always
    volumes:
      - ../:/var/www/
      - "/etc/timezone:/etc/timezone:ro"
      - "/etc/localtime:/etc/localtime:ro"
      - ./docker-php-memlimit.ini:/usr/local/etc/php/conf.d/docker-php-memlimit.ini
      - ./openssl.cnf:/etc/ssl/openssl.cnf
    networks:
      - docker-network
    tty: true

  nginx:
    container_name: nginx
    build: ./nginx
    restart: always
    tty: true
    ports:
      - "80:80"
      - "6001:6001"
    volumes:
      - ../:/var/www/
      - ./nginx/sites/:/etc/nginx/conf.d/
      - "/etc/timezone:/etc/timezone:ro"
      - "/etc/localtime:/etc/localtime:ro"
    networks:
      - docker-network
    depends_on:
      - php8

  caddy:
    container_name: caddy
    build: ./caddy
    volumes:
      - ../:/var/www
      - ./caddy/caddy:/etc/caddy
      - .logs/caddy:/var/log/caddy
    ports:
      - "80:80"
      - "443:443"
    networks:
      - docker-network
    restart: always
    tty: true

  mariadb:
    container_name: mariadb
    image: mariadb:latest
    restart: always
    environment:
      - MARIADB_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
      - MARIADB_USER=${MARIADB_USER}
      - MARIADB_PASSWORD=${MARIADB_PASSWORD}
    volumes:
      - ${DATA_LIB}/data/mariadb/data:/var/lib/mysql/data/
      - ${DATA_LIB}/data/mariadb/logs:/var/lib/mysql/logs/
    ports:
      - 3306:3306
    networks:
      - docker-network

  mysql:
    container_name: mysql
    image: mysql:latest
    command: mysqld --sql_mode=""
    restart: always
    tty: true
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
      - ${DATA_LIB}/data/mysql:/var/lib/mysql
      - ./mysql/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
      - "/etc/timezone:/etc/timezone:ro"
      - "/etc/localtime:/etc/localtime:ro"
    ports:
      - 3306:3306
    networks:
      - docker-network

  phpmyadmin:
    image: phpmyadmin:latest
    restart: always
    ports:
      - 8080:80
    environment:
      - PMA_ARBITRARY=1

networks: 
  docker-network:
    driver: bridge